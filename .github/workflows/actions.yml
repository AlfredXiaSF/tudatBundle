name: CMake
# https://github.com/jherico/starter-workflows/blob/master/ci/cmake.yml

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macOS-latest]
        # https://github.com/onqtam/doctest/pull/285/files

    steps:
    - uses: actions/checkout@v1

    - name: Clone Submodules
      shell: bash
      run: git submodule update --init --recursive

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake linux en macOS
      #SEB NOT!!!! if: contains( matrix.os, 'windows' )
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
#SEB the cp is very quick and dirty to fix something in submodule Tudat
      run: |
        cp -rf ../tudatBundle/tmp.txt ../tudatBundle/tudat/Tudat/CMakeLists.txt
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      env:
        CC: gcc
        CXX: g++
#SEB    Boost_ROOT: ${{runner.workspace}}/tudatBundle/boost/build

    - name: Configure CMake Windows
      if: contains( matrix.os, 'windows' )
      shell: bash
      working-directory: ${{runner.workspace}}/build
#SEB the cp is very quick and dirty to fix something in submodule Tudat
      run: |
        cp -rf ../tudatBundle/tmp.txt ../tudatBundle/tudat/Tudat/CMakeLists.txt
        cmake -G "MinGW Makefiles" -DCMAKE_SH="CMAKE_SH-NOTFOUND" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -S ../tudatBundle

      env:
        CC: gcc
        CXX: g++
        Boost_ROOT: ${{runner.workspace}}/tudatBundle/boost/build

    - name: Info after failure
      if: failure()
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        echo 'SEB ../tudatBundle contains'
        ls ../tudatBundle
        echo 'SEB ../tudatBundle/external contains'
        ls -l ../tudatBundle/external
        echo 'SEB ../tudatBundle/tudat contains'
        ls -l ../tudatBundle/tudat
        echo 'SEB ../build contains'
        ls -l ../build
        echo 'SEB BOOST_ROOT contains'
        ls -l ${BOOST_ROOT}
        echo 'SEB BOOST_ROOT/boost_1_64_0_GNU_8_1_0 contains'
        ls -l ${BOOST_ROOT}/boost_1_64_0_GNU_8_1_0
        echo 'SEB Boost_ROOT contains'
        ls -l ${Boost_ROOT}

      env:
        CC: gcc
        CXX: g++
        Boost_ROOT: ${{runner.workspace}}/tudatBundle/boost/build

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --target all --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
