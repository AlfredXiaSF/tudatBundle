name: tudatBundleCI
# adapted from:
# https://github.com/jherico/starter-workflows/blob/master/ci/cmake.yml
# and https://github.com/onqtam/doctest/pull/285/files

on: [push, pull_request]

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [
          ubuntu-gcc,
          ubuntu-clang,
          macOS-gcc,
          macOS-clang,
          windows-gcc,
          windows-clang,
        ]

        include:
        - name: ubuntu-gcc
          os: ubuntu-latest
          compiler: gcc

        - name: ubuntu-clang
          os: ubuntu-latest
          compiler: clang

        - name: macOS-gcc
          os: macOS-latest
          compiler: gcc

        - name: macOS-clang
          os: macOS-latest
          compiler: clang

        - name: windows-gcc
          os: windows-latest
          compiler: gcc

        - name: windows-clang
          os: windows-latest
          compiler: clang

    steps:
    - uses: actions/checkout@v1

    - name: Clone Submodules
      shell: bash
      run: git submodule update --init --recursive

    - name: Create Build Environment
      run: |
        cmake -E make_directory ${{runner.workspace}}/build

    - name: Set Compiler
      shell: bash
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          echo "::set-env name=CC::gcc"
          echo "::set-env name=CXX::g++"
        else
          echo "::set-env name=CC::clang"
          echo "::set-env name=CXX::clang"
        fi

    - name: Configure CMake linux
      if: ( contains(matrix.os, 'ubuntu') )
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to
      # specify source and build directories, but this is only available with
      # CMake 3.13 and higher.  
      run: |
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Configure CMake linux en macOS
      if: ( contains(matrix.os, 'macOS') )
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # see https://stackoverflow.com/questions/24380456/
      # how-can-i-make-cmake-use-gcc-instead-of-clang-on-mac-os-x/24380618
      run: |
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX

    - name: Configure CMake Windows
      if: ( contains(matrix.os, 'windows' ) )
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # See https://github.com/actions/virtual-environments/issues/10
      # and https://stackoverflow.com/questions/3016448/
      #     how-can-i-get-cmake-to-find-my-alternative-boost-installation
      run: |
        cmake -G "MinGW Makefiles" -DBoost_NO_BOOST_CMAKE=TRUE -DCMAKE_SH="CMAKE_SH-NOTFOUND" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -S ../tudatBundle

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        cmake --build . --target all --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ctest -C $BUILD_TYPE
