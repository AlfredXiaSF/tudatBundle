name: CMake
# adapted from:
# https://github.com/jherico/starter-workflows/blob/master/ci/cmake.yml

on: [push]

env:
  BUILD_TYPE: Release
  CC: gcc
  CXX: g++

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macOS-latest]
        # see https://github.com/onqtam/doctest/pull/285/files

    steps:
    - uses: actions/checkout@v1

    - name: Clone Submodules
      shell: bash
      run: git submodule update --init --recursive

    - name: Create Build Environment
      run: |
        cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake linux en macOS
      if: ( ! contains(matrix.os, 'windows') )
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to
      # specify source and build directories, but this is only available with
      # CMake 3.13 and higher.  
      run: |
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Configure CMake Windows
      if: ( contains(matrix.os, 'windows' ) )
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # See https://github.com/actions/virtual-environments/issues/10
      # and https://stackoverflow.com/questions/3016448/how-can-i-get-cmake-to-find-my-alternative-boost-installation
#SEB the cp is very quick and dirty to fix something in submodule Tudat
#SEB cp -rf ../tudatBundle/tmp.txt ../tudatBundle/tudat/Tudat/CMakeLists.txt
      run: |
        echo "::set-env name=BOOST_ROOT::"
        echo "::set-env name=Boost_ROOT::"
        cmake -G "MinGW Makefiles" -DCMAKE_SH="CMAKE_SH-NOTFOUND" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -S ../tudatBundle

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        echo "::set-env name=BOOST_ROOT::"
        echo "::set-env name=Boost_ROOT::"
        cmake --build . --target all --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ctest -C $BUILD_TYPE
