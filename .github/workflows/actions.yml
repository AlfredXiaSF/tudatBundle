name: CMake
# https://github.com/jherico/starter-workflows/blob/master/ci/cmake.yml

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        # os: [windows-latest, ubuntu-latest, macOS-latest]
        # https://github.com/onqtam/doctest/pull/285/files

    steps:
    - uses: actions/checkout@v1

    - name: Clone Submodules
      shell: bash
      run: git submodule update --init --recursive

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
#SEB  working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
#SEB  run: |
#SEB    cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
#SEB this is very quick and dirty to fix something in a submodule
      run: |
        echo 'SEB .. contains'
        ls ..
        echo 'SEB ../tudatBundle/tudat/Tudat contains'
        ls ../tudatBundle/tudat/Tudat
        echo 'SEB Boost_ROOT is'
        echo ${Boost_ROOT}
        echo 'SEB BOOST_ROOT is'
        echo ${BOOST_ROOT}
        echo 'SEB BOOST_ROOT contains'
        ls -l ${BOOST_ROOT}
        echo 'SEB PWD is'
        echo ${PWD}
        echo 'SEB PWD contains'
        ls -l ${PWD}
        cp -rf ../tudatBundle/tmp.txt ../tudatBundle/tudat/Tudat/CMakeLists.txt
#SEB    cmake -G "MinGW Makefiles" -DUSEJSON=OFF -DCMAKE_SH="CMAKE_SH-NOTFOUND" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -B build

      env:
        CC: gcc
        CXX: g++
        Boost_ROOT: ${PWD}/tudatBundle/boost/build

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --target all --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
